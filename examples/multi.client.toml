# 注意，本作示例文件的listen和dial的地址均为 127.0.0.1，是可以直接进行内网测试的; 如果你要用于其它用途，自行修改地址。

[app]
loglevel = 1

# 使用了default_uuid后, 下面其它dial和listen的uuid就可以省略

default_uuid = "a684455c-b14f-11ea-bf0d-42010aaa0003"   

admin_pass = "adfadfadfadfa"	# 用于 api服务器的登陆密码.只要给出, 且命令行给了-ea参数, 就会自动运行api服务, 在 127.0.0.1:48345

[dns]
# 只要dns模块存在并给出了servers，则所有域名请求都会被先解析成ip
# dns解析仅仅是为了能够精准分流, 如果你不需要分流, 没有自定义dns需求，则不需要dns模块

# dns解析的默认方式是先查A记录，没有A再查AAAA记录

servers = [
	"udp://114.114.114.114:53",      # 如果把该url指向我们dokodemo监听的端口，就可以达到通过节点请求dns的目的.
	{ addr = "udp://1.1.1.1:53", domains = [ "google.com" ] }	# 还可以为特定域名指定特定服务器
]

[dns.hosts]     # 自己定义的dns解析
"www.myfake.com" = "11.22.33.44"
"www.myfake2.com" = "11.222.33.44"


[[listen]]
protocol = "socks5"
host = "127.0.0.1"
port = 10800

[[listen]]
protocol = "dokodemo"
network = "udp"                 # 本监听为了监听dns请求，所以必须要指明监听的传输层为 udp
host = "127.0.0.1"
port = 20053
target = "udp://1.1.1.1:53"     #必须写这种url格式，前面是udp或者tcp，后面要加端口, 我们要转发到udp地址，所以用udp。

# 这个dokodemo 协议 在这一个示例中, 专门用于监听dns请求, 会通过我们的dial 来转发到 target(1.1.1.1，即cloudflare的dns服务器)

# 我们电脑只要配置好dns服务器指向127.0.0.1:20053，就可以通过我们的节点去申请实际的udp的dns请求，这里就是通过我们的 my_vless1 这个节点转发。
# 只要是定向的流量，如果某客户端可以自己指定地址，那么我们就可以用dokodemo进行转发

[[dial]]
tag = "my_vless1"  
protocol = "vlesss"
host = "127.0.0.1"
port = 4433
version = 0    
insecure = true 
utls = true   


[[dial]]
tag = "my_ws1"
protocol = "vlesss"
host = "127.0.0.1"
port = 4434
insecure = true
utls = true
advancedLayer = "ws"
path = "/ohmygod_verysimple_is_very_simple" 

# route就是分流规则，分流规则从上到下匹配，匹配到哪一个就用哪一个. 

[[route]]

# 意思就是所有向CN国家的ip请求的数据通通 通过 my_ws1 这个dial 拨号, 如果你写direct自然就直接直连
# direct并不需要 在dial中实际给出。 "proxy" 代表首个dial，也不需要实际赋值该tag

dialTag = "my_ws1"
country = ["CN"]    


[[route]]
dialTag = "my_vless1"

# 这个最后一个route中，我们只给了tag, 没给其它限定条件，这个是无效的，永远匹配不到。

# 如果所有route均不匹配，则数据会流向 "proxy" 这个tag 的 dial，如果 没有任何dial具有 "proxy" 这个标签名，则流向第一个dial

# 如果匹配了app.mycountry, 则数据会直接被直连.
# 其它分流匹配示例：
# ip = ["0.0.0.0/8","10.0.0.0/8","fe80::/10","10.0.0.1"]
# domain = ["www.google.com","www.twitter.com"]
# network = ["tcp","udp"]
# inTag = ["tag1","tag2"]
# country = ["CN"]

# 关于ip中使用cidr匹配ipv6，可以参考 https://www.mediawiki.org/wiki/Help:Range_blocks/IPv6
# 比如要想路由所有的ipv6地址，可用 ip = ["::/0"]
